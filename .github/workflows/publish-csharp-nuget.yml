name: Publish C# SDK to NuGet

on:
  push:
    tags:
      - 'v*.*.*'
      - 'csharp-v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: read
  packages: write  # Required for GitHub Packages

jobs:
  publish-nuget:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Set version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
          VERSION="${VERSION#v}"
          VERSION="${VERSION#csharp-v}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Update version in csproj
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        cd csharp
        # Update version in .csproj file
        sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/" RocketWelder.SDK.csproj
        sed -i "s/<PackageVersion>.*<\/PackageVersion>/<PackageVersion>$VERSION<\/PackageVersion>/" RocketWelder.SDK.csproj
    
    - name: Restore dependencies
      working-directory: ./csharp
      run: dotnet restore
    
    - name: Build
      working-directory: ./csharp
      run: dotnet build --configuration Release --no-restore
    
    - name: Pack
      working-directory: ./csharp
      run: dotnet pack --configuration Release --no-build --output ./nupkg /p:PackageVersion=${{ steps.version.outputs.version }}
    
    - name: Push to NuGet
      working-directory: ./csharp
      run: |
        dotnet nuget push ./nupkg/RocketWelder.SDK.*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    
    - name: Push to GitHub Packages
      working-directory: ./csharp
      continue-on-error: true  # GitHub Packages is optional, NuGet.org is primary
      run: |
        # Push package directly to GitHub Packages
        dotnet nuget push ./nupkg/RocketWelder.SDK.*.nupkg \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --source "https://nuget.pkg.github.com/modelingevolution/index.json" \
          --skip-duplicate
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Summary
      run: |
        echo "## C# SDK Published to NuGet" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Package**: RocketWelder.SDK" >> $GITHUB_STEP_SUMMARY
        echo "- **NuGet**: https://www.nuget.org/packages/RocketWelder.SDK" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Packages**: https://github.com/modelingevolution/rocket-welder-sdk/packages" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Install with:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo 'dotnet add package RocketWelder.SDK --version ${{ steps.version.outputs.version }}' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY